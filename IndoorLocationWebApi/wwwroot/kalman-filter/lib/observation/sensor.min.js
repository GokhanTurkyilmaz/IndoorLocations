/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/lib/observation/sensor.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const identity=require("../linalgebra/identity.js"),polymorphMatrix=require("../utils/polymorph-matrix.js"),checkMatrix=require("../utils/check-matrix.js"),copy=o=>o.map((o=>o.concat()));module.exports=function(o){const{sensorDimension:e=1,sensorCovariance:i=1,nSensors:n=1}=o,r=polymorphMatrix(i,{dimension:e});checkMatrix(r,[e,e],"observation.sensorCovariance");const t=identity(e);let c=[];const s=e*n,a=identity(s);for(let o=0;o<n;o++)c=c.concat(t.map((o=>o.concat()))),r.forEach(((i,n)=>i.forEach(((i,r)=>{a[n+o*e][r+o*e]=i}))));return Object.assign({},o,{dimension:s,observedProjection:c,covariance:a})};
//# sourceMappingURL=/sm/f5d667a572acd8b35662f326f0aaed89333c1cb31382d6f8550ccec02169d3ac.map