/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/lib/dynamic/constant-acceleration.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const identity=require("../linalgebra/identity.js");module.exports=function(e,t){const n=e.timeStep||1,{observedProjection:i}=t,{stateProjection:o}=t,r=t.dimension;let s;if(o&&Number.isInteger(o[0].length/3))s=t.stateProjection[0].length;else if(i)s=3*i[0].length;else{if(!r)throw new Error("observedProjection or stateProjection should be defined in observation in order to use constant-speed filter");s=3*r}const c=s/3,a=identity(s);for(let e=0;e<c;e++)a[e][e+c]=n,a[e][e+2*c]=.5*n**2,a[e+c][e+2*c]=n;const l=new Array(c).fill(1).concat(new Array(c).fill(n*n)).concat(new Array(c).fill(n**4)),d=e.covariance||l;return Object.assign({},e,{dimension:s,transition:a,covariance:d})};
//# sourceMappingURL=/sm/a773dbce43b9e996de19deed2346117881be56adb39a8688fd1e484550a531a3.map