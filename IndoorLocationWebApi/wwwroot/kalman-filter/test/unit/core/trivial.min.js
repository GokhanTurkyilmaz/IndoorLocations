/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/unit/core/trivial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),CoreKalmanFilter=require("../../../lib/core-kalman-filter.js"),State=require("../../../lib/state.js"),trace=require("../../../lib/linalgebra/trace.js"),equalState=require("../../../test/helpers/equal-state.js"),distanceMat=require("../../../lib/linalgebra/distance-mat.js"),sum=require("../../../lib/linalgebra/sum.js"),defaultOptions={observation:{dimension:1,stateProjection:()=>[[1]],covariance:()=>[[1]]},dynamic:{dimension:1,init:{mean:[[0]],covariance:[[1]]},transition:()=>[[1]],covariance:()=>[[1]]}},observation=[[.1]],huge=1e3,tiny=.001;test("Init with zero mean",(e=>{const t=new CoreKalmanFilter(defaultOptions),{mean:a,covariance:n,index:i}=defaultOptions.dynamic.init,r=new State({mean:a,covariance:n,index:i});e.true(equalState(t.predict(),t.predict({previousCorrected:r}))),e.true(t.predict()instanceof State)})),test("Impact previousCorrected and dynamic covariance",(e=>{const t=Object.assign({},defaultOptions,{dynamic:Object.assign({},defaultOptions.dynamic,{covariance:()=>[[tiny]]})}),a=new CoreKalmanFilter(t),n=new State({mean:[[0]],covariance:[[tiny]]}),i=a.predict({previousCorrected:n});e.true(i instanceof State),e.is(i.index,void 0),e.true(2/trace(i.covariance)>500)})),test("Huge predicted covariance",(e=>{const t=new CoreKalmanFilter(defaultOptions),a=new State({mean:[[1]],covariance:[[1e3]]}),n=t.correct({predicted:a,observation:observation}),i=t.getGain({predicted:a,stateProjection:[[1]]});e.true(n instanceof State),e.true(i>.99)})),test("Dynamic covariance test",(e=>{const t=new State({mean:[[0]],covariance:[[1]]}),a=new State({mean:[[0]],covariance:[[1e3]]}),n=new CoreKalmanFilter(defaultOptions),i=Object.assign({},defaultOptions,{dynamic:Object.assign({},defaultOptions.dynamic,{covariance:()=>[[1e3]]})}),r=new CoreKalmanFilter(i),o=n.predict({previousCorrected:t}),c=r.predict({previousCorrected:t}),s=n.predict({previousCorrected:a});e.true(trace(o.covariance)<trace(c.covariance)),e.true(equalState(c,s))})),test("Observation covariance test",(e=>{const t=new State({mean:[[0]],covariance:[[1]]}),a=new State({mean:[[0]],covariance:[[tiny]]}),n=new CoreKalmanFilter(defaultOptions),i=Object.assign({},defaultOptions,{observation:Object.assign({},defaultOptions.observation,{covariance:()=>[[tiny]]})}),r=new CoreKalmanFilter(i),o=n.correct({predicted:t,observation:observation}),c=r.correct({predicted:t,observation:observation}),s=n.correct({predicted:a,observation:observation});e.true(trace(o.covariance)>trace(c.covariance));const d=r.getGain({predicted:t}),l=n.getGain({predicted:t,stateProjection:[[1]]});e.true(sum(d)>sum(l)),e.true(equalState(c,s,.1))})),test("Predicted covariance equals to zero",(e=>{const t=new CoreKalmanFilter(defaultOptions),a=new State({mean:[[0]],covariance:[[0]]}),n=t.correct({predicted:a,observation:observation});e.is(trace(n.covariance),0)})),test("Fitted observation",(e=>{const t=new CoreKalmanFilter(defaultOptions),a=new State({mean:defaultOptions.dynamic.init.mean,covariance:defaultOptions.dynamic.init.covariance}),n=t.predict({previousCorrected:a}),i=t.correct({predicted:n,observation:observation}),r=t.correct({predicted:n,observation:[[1.2]]});e.true(i instanceof State),e.true(r instanceof State);const o=distanceMat(defaultOptions.dynamic.init.mean,i.mean),c=distanceMat(defaultOptions.dynamic.init.mean,r.mean);e.true(o<c)})),test("NaN Error",(e=>{const t=new State({mean:[[0]],covariance:[[Number.NaN]]}),a=new CoreKalmanFilter(defaultOptions),n=e.throws((()=>{a.predict({previousCorrected:t})}));e.is(n.message,"[covariance] Matrix should not have a NaN\nIn : \nNaN")})),test("Non squared matrix",(e=>{const t=new State({mean:[[0,0]],covariance:[[1,0,0],[0,1,0]]}),a=new CoreKalmanFilter(defaultOptions),n=e.throws((()=>{a.predict({previousCorrected:t})}));e.is(n.message,"[mean] expected size (1) and length (2) does not match")}));
//# sourceMappingURL=/sm/485cc82a992fc70a9f25abe893b89358d37fcb31c0fbdd1b62b1ce18359b5c06.map