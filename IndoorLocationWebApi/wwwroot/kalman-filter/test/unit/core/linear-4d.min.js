/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/unit/core/linear-4d.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),CoreKalmanFilter=require("../../../lib/core-kalman-filter.js"),State=require("../../../lib/state.js"),distanceMat=require("../../../lib/linalgebra/distance-mat.js"),getCorrelation=require("../../helpers/get-correlation.js"),huge=1e3,defaultOptions={observation:{dimension:4,stateProjection:()=>[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0]],covariance:()=>[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},dynamic:{init:{mean:[[500],[500],[100],[100],[0],[0],[0],[0]],covariance:[[1e3,0,0,0,0,0,0,0],[0,1e3,0,0,0,0,0,0],[0,0,1e3,0,0,0,0,0],[0,0,0,1e3,0,0,0,0],[0,0,0,0,1e3,0,0,0],[0,0,0,0,0,1e3,0,0],[0,0,0,0,0,0,1e3,0],[0,0,0,0,0,0,0,1e3]]},dimension:8,transition:()=>[[1,0,0,0,timeStep,0,0,0],[0,1,0,0,0,timeStep,0,0],[0,0,1,0,0,0,timeStep,0],[0,0,0,1,0,0,0,timeStep],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1]],covariance:()=>[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,.1,0,0,0,0,0],[0,0,0,.1,0,0,0,0],[0,0,0,0,.01,0,0,0],[0,0,0,0,0,.01,0,0],[0,0,0,0,0,0,.001,0],[0,0,0,0,0,0,0,.001]]}},timeStep=.1,observations=[[[1],[2],[1],[1]],[[2.1],[3.9],[1.02],[1.05]],[[3],[6],[1.04],[1.09]]];test("Fitted observation",(e=>{const t=new CoreKalmanFilter(defaultOptions),a=new State({mean:[[1],[2],[1],[1],[11],[19],[.2],[.5]],covariance:[[1,0,.3,0,0,0,0,0],[0,1,0,0,0,0,0,0],[.3,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,.1,0,0,0],[0,0,0,0,0,.1,0,0],[0,0,0,0,0,0,.1,0],[0,0,0,0,0,0,0,.1]]}),r=t.predict({previousCorrected:a}),o=t.correct({predicted:r,observation:observations[1]}),i=t.correct({predicted:r,observation:[[3.2],[2.9],[1.7],[1.2]]});e.true(o instanceof State),e.true(i instanceof State);const n=distanceMat(a.mean,o.mean),s=distanceMat(a.mean,i.mean);e.true(n<s)})),test("stateProjection",(e=>{const t=Object.assign({},defaultOptions,{observation:Object.assign({},defaultOptions.observation,{stateProjection:()=>[[1,0,-.5,0,0,0,0,0],[0,1,0,.5,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0]]})}),a=new State({mean:[[1],[2],[.1],[.1],[11],[19],[1],[1]],covariance:[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,.1,0,0,0,0,0],[0,0,0,.1,0,0,0,0],[0,0,0,0,.01,0,0,0],[0,0,0,0,0,.01,0,0],[0,0,0,0,0,0,.001,0],[0,0,0,0,0,0,0,.001]]}),r=new CoreKalmanFilter(defaultOptions),o=new CoreKalmanFilter(t),i=r.predict({previousCorrected:a}),n=o.predict({previousCorrected:a}),s=r.correct({predicted:i,observation:observations[1]}),c=o.correct({predicted:n,observation:observations[1]});e.true(Math.abs(getCorrelation(s.covariance,2,0))<Math.abs(getCorrelation(c.covariance,2,0)))})),test("Mixed fitted observation",(e=>{const t=new CoreKalmanFilter(defaultOptions),a=new State({mean:[[1],[2],[1],[1],[11],[19],[.2],[.5]],covariance:[[1,0,.3,0,0,0,0,0],[0,1,0,0,0,0,0,0],[.3,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,.1,0,0,0],[0,0,0,0,0,.1,0,0],[0,0,0,0,0,0,.1,0],[0,0,0,0,0,0,0,.1]]}),r=t.predict({previousCorrected:a}),o=t.correct({predicted:r,observation:observations[1]}),i=t.correct({predicted:r,observation:[[2],[2.9],[1.02],[1.05]]}),n=t.correct({predicted:r,observation:[[2],[2.9],[1.02],[1]]});e.true(Math.abs(i.covariance[1][1])>Math.abs(i.covariance[0][0]));const s=[Math.abs(o.mean[1]-r.mean[1]),Math.abs(o.mean[3]-r.mean[3])],c=[Math.abs(n.mean[1]-r.mean[1]),Math.abs(n.mean[3]-r.mean[3])];e.true(s[0]<c[0]),e.true(s[1]<c[1])}));
//# sourceMappingURL=/sm/6533287fdc9a18fb0cc9d9df4c5c884f73716b6d2cf5a1fde2af855d04abed3c.map