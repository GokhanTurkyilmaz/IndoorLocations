/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/unit/kalman-filter/filter.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),equalState=require("../../../test/helpers/equal-state.js"),KalmanFilter=require("../../../lib/kalman-filter.js"),State=require("../../../lib/state.js");test("Filter method",(e=>{const t=[[.11],[.21],[.3]],a=new KalmanFilter({dynamic:{name:"constant-speed"},observation:{name:"sensor"}}),n=a.filter({observation:t[0]});e.true(n instanceof State);const r=a.predict(),s=a.correct({predicted:r,observation:t[0]});e.true(equalState(n,s))})),test("FilterAll",(e=>{const t=[[.11],[.21],[.3]],a=new KalmanFilter({dynamic:{name:"constant-speed"},observation:{name:"sensor"}}),n=a.filterAll(t);e.is(n.length,3);const r=a.filter({observation:t[0]}).mean.map((e=>e[0]));e.deepEqual(r,n[0])}));
//# sourceMappingURL=/sm/cb97d9447d41a76df129ddc883237cabf5c87291c1503bf40e5e607ea3881f8a.map