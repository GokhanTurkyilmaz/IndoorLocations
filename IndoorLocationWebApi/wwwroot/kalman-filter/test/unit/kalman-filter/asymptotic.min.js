/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/unit/kalman-filter/asymptotic.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),KalmanFilter=require("../../../lib/kalman-filter.js"),distanceMat=require("../../../lib/linalgebra/distance-mat.js"),sum=require("../../../lib/linalgebra/sum.js");test("Convergence",(e=>{const a=new KalmanFilter({dynamic:{name:"constant-position",dimension:1,covariance:[[1]]},observation:{dimension:1,stateProjection:[[1]],covariance:[[1]]}}).asymptoticStateCovariance();e.true(distanceMat(a,[[.618]])<.001)})),test("Large covariances",(e=>{const a=new KalmanFilter({dynamic:{name:"constant-speed",dimension:2,covariance:[[1e6,1e3],[1e3,1e6]]},observation:{dimension:1,stateProjection:[[1,0]],covariance:[[1e6]]}});e.true(sum(a.asymptoticStateCovariance())>1e6)})),test("Error when not converging",(e=>{const a=new KalmanFilter({dynamic:{dimension:2,name:"constant-speed",covariance:function({previousCorrected:e}){return[[1,0],[0,e.covariance[0][0]**2]]}},observation:{dimension:1,stateProjection:[[1,0]],covariance:[[1e6]]}}),n=e.throws((()=>{a.asymptoticStateCovariance()}));e.is(n.message,"The state covariance does not converge asymptotically")}));
//# sourceMappingURL=/sm/25370273bb240a8d6ea195557d7bd1fc26b4e0db0a8a89da64b5d4c14cda00de.map