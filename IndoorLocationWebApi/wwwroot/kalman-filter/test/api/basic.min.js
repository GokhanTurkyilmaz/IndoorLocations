/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/api/basic.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),KalmanFilter=require("../../lib/kalman-filter.js"),State=require("../../lib/state.js"),observations=[[0,2],[.1,4],[.5,9],[.2,12]];test("Default filter : Constant-position on 1D Data",(e=>{const n=[0,.1,.5,.2,3,4,2,1,2,3,5,6],t=(new KalmanFilter).filterAll(n);e.true(Array.isArray(t)),e.is(t.length,n.length)})),test("Simple constant-position 2d",(e=>{const n=new KalmanFilter({observation:2}).filterAll([[.11,.1],[.21,.19],[.3,.3]]);e.true(Array.isArray(n))})),test("Simple constant-speed 2d",(e=>{const n=new KalmanFilter({observation:2,dynamic:"constant-speed"}).filterAll([[.11,.1],[.21,.19],[.3,.3]]);e.true(Array.isArray(n))})),test("Constant-position on 2D Data",(e=>{const n=new KalmanFilter({observation:{sensorDimension:2,name:"sensor"},dynamic:{name:"constant-position",covariance:[3,4]}}),t=new State({mean:[[100],[100]],covariance:[[1,0],[0,1]]}),a=n.predict({previousCorrected:t}),o=n.correct({predicted:a,observation:observations[0]});e.true(a instanceof State),e.true(o instanceof State)})),test("Constant-speed on 3D Data",(e=>{const n=new State({mean:[[100],[100],[100],[0],[0],[0]],covariance:[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,.01,0,0],[0,0,0,0,.01,0],[0,0,0,0,0,.01]],index:1}),t=new KalmanFilter({observation:{sensorDimension:3,name:"sensor"},dynamic:{name:"constant-speed",timeStep:.1,covariance:[1,1,1,.1,.1,.1]}}),a=t.predict({previousCorrected:n}),o=t.correct({predicted:a,observation:[0,2,3]});e.true(a instanceof State),e.true(o instanceof State),e.is(typeof o.index,"number"),e.is(o.covariance.length,6);const s=new KalmanFilter({observation:{dimension:3,name:"sensor"},dynamic:{dimension:6,transition:[[1,0,0,.1,0,0],[0,1,0,0,.1,0],[0,0,1,0,0,.1],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]],covariance:[1,1,1,.1,.1,.1]}});e.deepEqual(s.predict({previousCorrected:n}),t.predict({previousCorrected:n}))})),test("Constant acceleration on 2D Data",(e=>{const n=new KalmanFilter({observation:{sensorDimension:2,name:"sensor"},dynamic:{name:"constant-acceleration",timeStep:.1,covariance:[3,3,4,4,5,5]}}),t=new State({mean:[[100],[100],[10],[10],[0],[0]],covariance:[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,.01,0,0,0],[0,0,0,.01,0,0],[0,0,0,0,1e-4,0],[0,0,0,0,0,1e-4]]}),a=n.predict({previousCorrected:t}),o=n.correct({predicted:a,observation:[[102],[101]]});e.true(a instanceof State),e.is(a.mean.length,6),e.true(o instanceof State),e.is(o.mean.length,6)})),test("Sensor observation",(e=>{const n=new KalmanFilter({observation:{sensorDimension:2,nSensors:2,sensorCovariance:[3,4],name:"sensor"},dynamic:{name:"constant-speed",covariance:[3,3,4,4]}});e.is(n.observation.stateProjection.length,n.observation.sensorDimension*n.observation.nSensors),e.is(n.observation.stateProjection[0].length,4),e.is(n.observation.covariance.length,4);const t=new State({mean:[[100],[100],[10],[10]],covariance:[[1,0,0,0],[0,1,0,0],[0,0,.01,0],[0,0,0,.01]]}),a=n.predict({previousCorrected:t}),o=n.correct({predicted:a,observation:[[102],[101],[98],[105]]});e.true(a instanceof State),e.is(a.mean.length,4),e.true(o instanceof State),e.is(o.mean.length,4)})),test("Simple Batch Usage",(e=>{const n=new KalmanFilter({observation:{sensorDimension:2,name:"sensor"},dynamic:{name:"constant-speed",covariance:[3,3,4,4]}}).filterAll(observations);e.is(n.length,4)})),test("Model fits ",(e=>{const n=new KalmanFilter({observation:{sensorDimension:2,name:"sensor"},dynamic:{name:"constant-speed",covariance:[3,3,4,4]}});let t=null;const a=[];[[0,2],[.1,4],[.5,9],[.2,12]].forEach((e=>{const o=n.predict({previousCorrected:t}),s=o.mahalanobis({observation:e,kf:n});t=n.correct({predicted:o,observation:e}),a.push(s)}));const o=a.reduce(((e,n)=>e+n),0);e.true(o>0)}));
//# sourceMappingURL=/sm/93f5c8dbe28c5219b786a966a68cfc3c06211d87f53358e04ce24c5396e22346.map