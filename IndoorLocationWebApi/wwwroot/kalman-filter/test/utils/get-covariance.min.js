/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/kalman-filter@1.9.2/test/utils/get-covariance.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const test=require("ava"),h=require("hasard"),cholesky=require("cholesky"),matMul=require("../../lib/linalgebra/mat-mul"),add=require("../../lib/linalgebra/add"),getCovariance=require("../../lib/utils/get-covariance"),buildDataFromCovariance=function(a){const e=a.length,r=cholesky(a),t=new Array(e).fill(1).map(((a,t)=>new Array(e).fill(1).map(((a,e)=>r[t][e]||0)))),i=h.number({type:"normal",mean:0,std:1}),n=h.array({size:e,value:h.number({type:"uniform",start:0,end:200})}),l=h.array({size:e,value:i});return h.fn(((a,e)=>({measure:add(e.map((a=>[a])),matMul(t,a.map((a=>[a])))).map((a=>a[0])),average:e})))(l,n)};test("get-covariance should give a results that makes sense on 1000 data",(a=>{const e=[[4,12,-16],[12,37,-43],[-16,-43,98]],r=buildDataFromCovariance(e).run(1e5),t=getCovariance({measures:r.map((({measure:a})=>a)),averages:r.map((({average:a})=>a))});e.forEach(((e,r)=>{e.forEach(((e,i)=>{a.true(Math.abs(t[r][i]-e)<1)}))}))}));
//# sourceMappingURL=/sm/a7805582bd3fc58618d7337e1db6e7c0ed5d44e12e23ee88b8febb349a95333a.map